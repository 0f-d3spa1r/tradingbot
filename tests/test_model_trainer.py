# tests/test_model_trainer.py
import logging
import pandas as pd
import numpy as np

from config import BYBIT_API_KEY, BYBIT_API_SECRET
from pybit.unified_trading import HTTP
from data_loader import set_client, get_processed_ohlcv
from feature_engineering import select_features
from model_trainer import load_model_and_scaler, predict_on_batch

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    # 0) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pybit –∫–ª–∏–µ–Ω—Ç –¥–ª—è data_loader
    assert BYBIT_API_KEY and BYBIT_API_SECRET, "–ü—Ä–æ–≤–µ—Ä—å .env / config: –ø—É—Å—Ç—ã–µ BYBIT_API_KEY/BYBIT_API_SECRET"
    client = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
    set_client(client)

    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å, —Å–∫–µ–π–ª–µ—Ä –∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Ñ–∏—á–µ–π
    logger.info("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Å–∫–µ–π–ª–µ—Ä...")
    model, scaler, cat_features = load_model_and_scaler()

    # 2) –ë–µ—Ä—ë–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤–∏–º —Ñ–∏—á–∏
    logger.info("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (BTCUSDT, 15m)...")
    df = get_processed_ohlcv("BTCUSDT", "15", limit=500)
    X, _ = select_features(df)

    # 3) –°–æ–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥ –¥–ª—è –º–æ–¥–µ–ª–∏ –∫–∞–∫ –≤ –ø—Ä–æ–¥–µ: scale num + –ø—Ä–∏–∫–ª–µ–∏—Ç—å cat
    X_cat = X.select_dtypes(include=["object", "category"])
    X_num = X.select_dtypes(include=["number"])
    X_scaled = pd.DataFrame(scaler.transform(X_num), columns=X_num.columns, index=X_num.index)
    X_input = pd.concat([X_scaled, X_cat], axis=1)

    # 4) –ü—Ä–æ–≥–Ω–æ–∑
    preds, probs = predict_on_batch(model, X_input, cat_features=cat_features)

    logger.info("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã.")
    logger.info(f"–ü—Ä–∏–º–µ—Ä: preds[:5]={preds[:5]}")
    if isinstance(probs[0], (list, tuple, np.ndarray)):
        max_probs = [max(p) for p in probs[:5]]
    else:
        max_probs = probs[:5]
    logger.info(f"–ü—Ä–∏–º–µ—Ä: max proba[:5]= {max_probs}")


if __name__ == "__main__":
    main()
