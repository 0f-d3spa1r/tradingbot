import os
import logging
import numpy as np
import pandas as pd
from pybit.unified_trading import HTTP
from data_loader import set_client
from model_trainer import (
    prepare_data,
    optimize_catboost,
    train_final_model,
    load_model_and_scaler,
    predict_on_batch
)

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

def run_smoke_test():
    print("\n=== üöÄ TradingBot Smoke Test ===\n")

    client = HTTP()  # –ø—É–±–ª–∏—á–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–µ–π
    set_client(client)

    symbol = "BTCUSDT"
    interval = "15"
    print(f"Fetching data for {symbol} ({interval}m)...")

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X_train, X_test, y_train, y_test = prepare_data(symbol, interval, threshold=0.0015)
    print(f"Train size: {len(X_train)}, Test size: {len(X_test)}")
    print("Feature columns:", len(X_train.columns))

    # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é (–∫–æ—Ä–æ—Ç–∫–æ)
    print("\nRunning quick Bayesian optimization (short)...")
    best_params = optimize_catboost(X_train.head(300), y_train.head(300))
    print("Best params:", best_params)

    # 3Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –æ–±—ä—ë–º–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    print("\nTraining final model...")
    train_final_model(X_train.head(500), y_train.head(500), best_params)

    # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏ —Å–∫–µ–π–ª–µ—Ä–∞
    model, scaler, cat_features = load_model_and_scaler()
    print(f"Loaded model OK. Cat features: {cat_features}")

    # 5Ô∏è‚É£ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –±–∞—Ç—á–µ
    preds, confs = predict_on_batch(model, X_test.head(10), cat_features)
    print("\nSample predictions:")
    for i, (p, c) in enumerate(zip(preds, confs)):
        print(f"  Row {i+1}: class={p}, conf={c:.4f}")

    print("\n‚úÖ Smoke test complete ‚Äî everything appears functional.\n")

if __name__ == "__main__":
    os.makedirs("tests", exist_ok=True)
    run_smoke_test()
